const report = require('multiple-cucumber-html-reporter');
const os = require('os');
const fs = require('fs');
const path = require('path');
const credentials = require('./config/credentials.js');

// Helper function to get OS details
function getOSDetails() {
  const platform = os.platform();
  const release = os.release();
  const type = os.type();
  
  let osName = type;
  if (platform === 'darwin') {
    osName = 'macOS';
  } else if (platform === 'win32') {
    osName = 'Windows';
  } else if (platform === 'linux') {
    osName = 'Linux';
  }
  
  return `${osName} ${release}`;
}

// Helper function to get device details
function getDeviceDetails(env) {
  const deviceType = env?.deviceType || 'Desktop';
  return `Local - ${deviceType}`;
}

// Helper function to get browser details
function getBrowserDetails(env) {
  if (env?.browser) {
    const name = env.browser.name || 'chromium';
    const version = env.browser.version || 'latest';
    return `${name.charAt(0).toUpperCase() + name.slice(1)} ${version}`;
  }
  return 'Chromium latest';
}

report.generate({
  jsonDir: 'reports/json',
  reportPath: 'reports/html',
  reportName: 'DME ROCKET E2E Automation Report',
  pageTitle: 'DME ROCKET E2E Automation Report',
  pageFooter: '<div><p>Generated by DME ROCKET E2E Automation Framework</p></div>',
  displayDuration: true,
  displayReportTime: true,
  metadata: {
    browser: (function() {
      const envPath = path.join('reports', 'meta', 'env.json');
      let env = null;
      try { env = JSON.parse(fs.readFileSync(envPath, 'utf-8')); } catch {}
      return { 
        name: env?.browser?.name || 'chromium', 
        version: env?.browser?.version || 'latest' 
      };
    })(),
    device: (function() {
      const envPath = path.join('reports', 'meta', 'env.json');
      let env = null;
      try { env = JSON.parse(fs.readFileSync(envPath, 'utf-8')); } catch {}
      return getDeviceDetails(env);
    })(),
    platform: { 
      name: os.platform(), 
      version: getOSDetails()
    }
  },
  customData: (function() {
    const envPath = path.join('reports', 'meta', 'env.json');
    let env = null;
    try { env = JSON.parse(fs.readFileSync(envPath, 'utf-8')); } catch {}
    const start = env?.run?.start ? new Date(env.run.start) : null;
    const end = env?.run?.end ? new Date(env.run.end) : null;
    const durationMs = env?.run?.durationMs ?? null;
    
    // Get the resolved baseUrl (either from env or credentials file)
    const testingServer = credentials.baseUrl;

    const humanDuration = durationMs != null ? `${Math.round(durationMs/1000)}s` : 'n/a';
    
    // Ordered as requested: Browser, Machine, Device, OS, Testing Server, Test Run Info
    const rows = [
      { label: 'Browser Name and Version', value: getBrowserDetails(env) },
      { label: 'Machine Name', value: env?.machine || os.hostname() },
      { label: 'Desktop or Mobile', value: env?.deviceType || 'Desktop' },
      { label: 'OS Name and Version', value: getOSDetails() },
      { label: 'Testing Server', value: testingServer },
      { label: 'Start Time', value: start ? start.toLocaleString() : 'n/a' },
      { label: 'End Time', value: end ? end.toLocaleString() : 'n/a' },
      { label: 'Duration', value: humanDuration },
    ];

    return {
      title: 'Test Environment Information',
      data: rows
    };
  })()
});

console.log('DME ROCKET E2E Automation Report generated at reports/html/index.html');

// Post-process the report to customize Dashboard heading
require('./post-process-report.js');